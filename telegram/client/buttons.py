from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from .callbacks import StrelkaQuestionCallback, RouteInputCallback


# Main menu buttons.
def get_main_keyboard():
    buttons = [
        [InlineKeyboardButton(text='üöå –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞', callback_data="route_schedule")],
        [InlineKeyboardButton(text='üí∏ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞', callback_data="route_cost")],
        [InlineKeyboardButton(text='üöÄ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –°—Ç—Ä–µ–ª–∫–µ', callback_data="strelka_questions")],
        [InlineKeyboardButton(text='üé´ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¢—Ä–æ–π–∫–µ', callback_data="troika_questions")],
        [InlineKeyboardButton(text='üí≥ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ë–ö', callback_data="card_questions")],
        [InlineKeyboardButton(text='üí° –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data="general_questions")],
        [InlineKeyboardButton(text='üôãüèª‚Äç‚ôÇÔ∏è –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã / –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data="add_questions")],
        [InlineKeyboardButton(text='‚ÑπÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ –∏–Ω—Ñ–æ', callback_data="ref_info")],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

# Schedule routes inline buttons.
def get_schedule_date_keyboard():
    buttons = [
        [InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è', callback_data="today")],
        [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', callback_data="get_date")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_route_input_type_keyboard():
    buttons = [
        [InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=RouteInputCallback(action='name').pack())],
        [InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä', callback_data=RouteInputCallback(action='number').pack())]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

# Strelka inline buttons.
exchenge_section_questions = [
    '–ö–∞–∫ –æ–±–º–µ–Ω—è—Ç—å –°—Ç—Ä–µ–ª–∫—É?',
    '–ü–æ—á–µ–º—É –º–æ–≥—É—Ç –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –æ–±–º–µ–Ω–µ?',
    '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –°—Ç—Ä–µ–ª–∫–∏?',
    '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ –°—Ç—Ä–µ–ª–∫–∏?',
    '–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –±–∏–ª–µ—Ç—ã –Ω–∞ –ñ/–î?',
    '–ö–∞–∫ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –°—Ç—Ä–µ–ª–∫–∏?',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
]

tariffs_section_questions = [
    '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–µ–∑–¥ –ø–æ —Å–∏–Ω–µ–π –°—Ç—Ä–µ–ª–∫–µ?',
    '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–µ–∑–¥ –ø–æ –°—Ç—Ä–µ–ª–∫–µ —É—á–∞—â–µ–≥–æ—Å—è?',
    '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–µ–∑–¥ –ø–æ –°—Ç—Ä–µ–ª–∫–µ –ª—å–≥–æ—Ç–Ω–æ–π?',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
]

benefits_section_questions = [
    '–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –°—Ç—Ä–µ–ª–∫—É —É—á–∞—â–µ–≥–æ—Å—è?',
    '–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –°—Ç—Ä–µ–ª–∫—É –ª—å–≥–æ—Ç–Ω–∞—è?',
    '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª—å–≥–æ—Ç—É –ø–æ –°—Ç—Ä–µ–ª–∫–µ —É—á–∞—â–µ–≥–æ—Å—è?',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
]

def exchenge_section_keyboard():
    buttons = []
    for index, item in enumerate(exchenge_section_questions, start=1):
        if '–ù–∞–∑–∞–¥' in item:
            buttons.append([InlineKeyboardButton(text=item, callback_data='strelka_back')])
        else:
            buttons.append([InlineKeyboardButton(text=item, callback_data=StrelkaQuestionCallback(number_question=f'exchange_{index}').pack())])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def tariffs_section_keyboard():
    buttons = []
    for index, item in enumerate(tariffs_section_questions, start=1):
        if '–ù–∞–∑–∞–¥' in item:
            buttons.append([InlineKeyboardButton(text=item, callback_data='strelka_back')])
        else:
            buttons.append([InlineKeyboardButton(text=item, callback_data=StrelkaQuestionCallback(number_question=f'tariffs_{index}').pack())])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def benefits_section_keyboard():
    buttons = []
    for index, item in enumerate(benefits_section_questions, start=1):
        if '–ù–∞–∑–∞–¥' in item:
            buttons.append([InlineKeyboardButton(text=item, callback_data='strelka_back')])
        else:    
            buttons.append([InlineKeyboardButton(text=item, callback_data=StrelkaQuestionCallback(number_question=f'benefits_{index}').pack())])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_sections_strelka_keyboard():
    buttons = [
        [InlineKeyboardButton(text='–û–±–º–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—Ç', callback_data="exchange")],
        [InlineKeyboardButton(text='–¢–∞—Ä–∏—Ñ—ã', callback_data="tariffs")],
        [InlineKeyboardButton(text='–ö–∞—Ä—Ç—ã –ª—å–≥–æ—Ç–Ω–æ–π —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', callback_data="benefits")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

# Troika inline buttons.
troika_questions = [
    ('–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–µ–∑–¥?', 'troika_cost'),
    ('–î–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –¢—Ä–æ–π–∫–æ–π?', 'troika_loyalty'),
    ('–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¢—Ä–æ–π–∫—É?', 'troika_fill'),
    ('–ì–¥–µ –∫—É–ø–∏—Ç—å –¢—Ä–æ–π–∫—É?', 'troika_buy'),
]

def get_troika_questions_keyboard():
    buttons = []
    for question in troika_questions:
        buttons.append([InlineKeyboardButton(text=question[0], callback_data=question[1])])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


# Bank card inline buttons.
bank_card_questions = [
    ('–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–µ–∑–¥?', 'card_cost'),
    ('–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–µ–∑–¥?', 'card_count_pay'),
    ('–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–µ–∑–¥–æ–∫?', 'card_history'),
    ('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–µ–∑–¥?', 'card_error'),
    ('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–µ–∑–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º?', 'card_error_phone'),
    ('–ö–∞–∫ –ø–æ–≥–∞—Å–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å?', 'card_debt'),
]

def get_bank_card_questions_keyboard():
    buttons = []
    for question in bank_card_questions:
        buttons.append([InlineKeyboardButton(text=question[0], callback_data=question[1])])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


# Reference info inline buttons.
def get_sections_info_keyboard():
    buttons = [
        [InlineKeyboardButton(text='–ü–µ—Ä–µ—á–µ–Ω—å', callback_data="list")],
        [InlineKeyboardButton(text='–í–µ–¥–æ–º—Å—Ç–≤–æ', callback_data="department")],
    ] 

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

# Cancel buttons.
